"""
Django settings for rino project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import environ
import json

from django.contrib.messages import constants as messages

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = environ.Env()
environ.Env.read_env()  # reading .env file

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('RINO_DEBUG')

TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates') if DEBUG else env.str('TEMPLATE_DIR') 
MEDIA_DIR = os.path.join(BASE_DIR, 'media') if DEBUG else env.str('MEDIA_DIR') 

SECRET_KEY = env.str('RINO_SECRET_KEY')
ALLOWED_HOSTS = env.json('ALLOWED_HOSTS')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'polls',
    'crispy_forms',
    'core',
    'correspondence',
    'pqrs',
    'rest_framework',
    'django_filters',
    'django.contrib.postgres',
    'pinax.eventlog',
    'captcha',
    'storages',
    'corsheaders',
    'djcelery_email',
    'django_celery_results',
    'colorfield',
    'rolepermissions'
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'crum.CurrentRequestUserMiddleware',
]

ROOT_URLCONF = 'rino.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR, ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media'
            ],
        },
    },
]

WSGI_APPLICATION = 'rino.wsgi.application'

DATABASES = env.json('RINO_DATABASES')

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 9}
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'es-co'
TIME_ZONE = 'America/Bogota'
USE_I18N = True
USE_L10N = True
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/' if DEBUG else env.str('STATIC_URL')
STATIC_ROOT = os.path.join(BASE_DIR, 'assets') if DEBUG else env.str('STATIC_ROOT')

STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
        ('node_modules', os.path.join(BASE_DIR, 'node_modules/')),
    ] if DEBUG else env.json('STATICFILES_DIRS')

MEDIA_ROOT = MEDIA_DIR if DEBUG else env.str('MEDIA_ROOT')
MEDIA_URL = '/media/' if DEBUG else env.str('MEDIA_URL')

LOGIN_URL = 'login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = '/correspondence/charts'

# X_FRAME_OPTIONS = 'SAMEORIGIN'
XS_SHARING_ALLOWED_METHODS = ['POST', 'GET', 'OPTIONS', 'PUT', 'DELETE']

# Config constants
CONVERT_URL = 'http://localhost:3000/convert/office'

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

AUTH_USER_MODEL = 'auth.User'

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

AZURE_STORAGE_KEY = env.bool('AZURE_STORAGE_KEY')

if AZURE_STORAGE_KEY:
    STATIC_LOCATION = "static"
    MEDIA_LOCATION = "media"
    AZURE_ACCOUNT_NAME = "storagerino"
    DEFAULT_FILE_STORAGE = 'rino.custom_azure.AzureMediaStorage'
    STATICFILES_STORAGE = 'rino.custom_azure.AzureStaticStorage'
    AZURE_CUSTOM_DOMAIN = f'{AZURE_ACCOUNT_NAME}.blob.core.windows.net'

    STATIC_URL = f'http://rino.skillnet.com.co/{STATIC_LOCATION}/'
    MEDIA_URL = f'http://rino.skillnet.com.co/{MEDIA_LOCATION}/'


EMAIL_BACKEND = env.str('EMAIL_BACKEND')
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')
EMAIL_HOST = env.str('EMAIL_HOST')
EMAIL_HOST_USER = env.str('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env.str('EMAIL_HOST_PASSWORD')
EMAIL_PORT = env.int('EMAIL_PORT')


CORS_ORIGIN_ALLOW_ALL = True

SESSION_ENGINE = 'redis_sessions.session'

SESSION_REDIS = env.json('RINO_SESSION_REDIS')

CORS_ORIGIN_WHITELIST = (
  'http://localhost:8000',
  'https://storagerino.blob.core.windows.net'
)

CELERY_EMAIL_TASK_CONFIG = {
    'name': 'djcelery_email_send',
    'ignore_result': False,
}
CELERY_EMAIL_CHUNK_SIZE = 1
CELERY_RESULT_BACKEND = 'django-db'

ROLEPERMISSIONS_MODULE = 'rino.roles'
ROLEPERMISSIONS_REGISTER_ADMIN = True
ROLEPERMISSIONS_SUPERUSER_SUPERPOWERS = False

#DEBUG = True